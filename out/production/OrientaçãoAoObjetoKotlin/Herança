COMO PENSAR EM ORIENTÇÃO AO OBJETO ANTES DE PROGRAMAR?
-fazer uma tabela no topo calculadora(objeto) e os valores são as propriedades e métodos;
. Classe: Conjunto de objetos com características parecidas;
. Propriedade: características da classe calculadora;
. Métodos: ações que um objeto pode tomar (somar);



Resumo sobre herança Kotlin:
. A herança é um dos 3 pilares a orientação a objetos;
. A partir da Herança podemos estender ou modificar o comportamento de um código existente, promovendo a reutilização;
. A class existente na Herança é chamada de super class;
. A class ramificada da super class é chamada de class derivada e herda todos os membros presentes da super class;

-Class Generalizada:
. Pense em uma super class Food;
. A super class food deriva as class Pizza e Hamburguer;
. A class derivada possui as propriedades da super class

-Herança:
. Toda a class possui um supertipo chamado Any;
. O super Tipo Any possui um conjunto de funções: equals (), hashCode() e toString();
. Não exite herança múltipla, apenas uma class pode herdar da outra;
Ex:
    . Class com construtor primário indique Any:

    class Food(val price: Double)

    class Food(val price: Double) : Any()

-Declarando uma super class:
. Para que uma class possa herdar de uma superclass, é necessário que a superclass use o identificador open;
. A class perde o val ou var da sua propriedade (construtor primário), porque ela tende a reber o valor da superclass e está passa a dominá-la;
Ex:  open class Food(val price: Double)

     class Hamburger(price: Double) : Food(price)
. A class Food com a propriedade price pode cer acessada através de uma instância de hamburguer:
Ex: val hamburger: Hamburger = Hamburger(2.89)

    println("Total: ${hamburger.price}")
. Será necessario declarar a class como private ou protected, para que evite as subclasses de acessar os dados da superclass;

-Construtores Secundários:
. Quando a superclass não declarar o construtor primário, ela deve incializar o construtor e o val;
    Ex: open class Food {
            open val price: Double

            constructor(price: Double) {
                this.price = price
            }
        }
. A subclasse deverá auxiliar a superclass, com a palavra super.
. Ao em vez de usar this para copiar o dado da class, é necesário usar a palavra super para criar a propriedade na superclass;
    Ex de subclass tendo que identificar as propriedades da superclass:
        open class Food {
            open var price: Double = 0.0
            open var name: String = ""

            constructor(price: Double) {
                this.price = price
            }

            constructor(price: Double, name: String) {
                this.price = price
                this.name = name
            }
        }

        class Hamburger : Food {
            constructor(price: Double) : super(price)

            constructor(price: Double, name: String) : super(price, name)
        }
